{"version":3,"sources":["assets/female.svg","components/Card/Card.js","components/CardList/CardList.js","components/SearchBox/SearchBox.js","container/App.js","container/actions.js","container/constants.js","serviceWorker.js","container/reducers.js","index.js"],"names":["module","exports","Card","name","title","email","pic","skillList","skills","map","list","className","src","alt","href","CardList","CardArray","users","user","key","id","SearchBox","onSearch","aria-hidden","type","placeholder","onChange","App","this","props","onReqestRobots","searchField","onSearchChange","talentList","isPending","filteredTalents","filter","talent","toLowerCase","includes","require","target","rel","Component","connect","state","searchRobots","requestRobots","robots","error","dispatch","event","payload","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkmiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.cb5fc58c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/female.07947d56.svg\";","import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = ({ name, title, email, pic, skills }) => {\n  const skillList = skills.map((list) => {\n    return <li>{list}</li>;\n  });\n\n  return (\n    <div className=\"card\">\n      <img className=\"card-pic\" src={pic} alt=\"Profile Pic.\"></img>\n      <h3>{name}</h3>\n      <h4>{title}</h4>\n      <ul className=\"card-skills\">{skillList}</ul>\n      <button className=\"card-btn\">\n        <a href={`mailto:${email}`}>Contact Me</a>\n      </button>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"../Card/Card\";\nimport \"./CardList.css\";\n\nconst CardList = ({ users }) => {\n  const CardArray = users.map((user) => {\n    return (\n      <Card\n        key={user.id}\n        id={user.id}\n        name={user.name}\n        title={user.title}\n        email={user.email}\n        pic={user.pic}\n        skills={user.skills}\n      />\n    );\n  });\n  return <div className=\"card-container\">{CardArray}</div>;\n};\n\nexport default CardList;\n","import React from \"react\";\nimport \"./SearchBox.css\";\n\nconst SearchBox = ({ onSearch }) => {\n  return (\n    <>\n      <div className=\"search-box-with-icon\">\n        <i className=\"fa fa-search\" aria-hidden=\"true\"></i>\n        <input\n          type=\"search\"\n          className=\"search-box\"\n          placeholder=\"Search talent by position\"\n          onChange={onSearch}\n        ></input>\n      </div>\n    </>\n  );\n};\n\nexport default SearchBox;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CardList from \"../components/CardList/CardList\";\nimport SearchBox from \"../components/SearchBox/SearchBox\";\nimport { requestRobots, setSearchField } from \"./actions\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    talentList: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.isPending,\n  };\n};\n\n//dispatch -> what triggers an action\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => {\n      dispatch(setSearchField(event.target.value));\n    },\n\n    onReqestRobots: () => dispatch(requestRobots()),\n  };\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onReqestRobots();\n    // fetch(\"https://api.mocki.io/v1/89d4c4de\")\n    //   // fetch -> to make requests to the server\n    //   .then((response) => response.json())\n    //   .then((talentList) => this.setState({ talentList: talentList }));\n  }\n\n  // onSearch = (event) => {\n  //   this.setState({ searchField: event.target.value });\n  //   console.log(this.state);\n  // };\n\n  render() {\n    const { searchField, onSearchChange, talentList, isPending } = this.props;\n\n    const filteredTalents = talentList.filter((talent) => {\n      return talent.title.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    return isPending ? (\n      <h1>Loading</h1>\n    ) : (\n      <>\n        <div className=\"app\">\n          <div className=\"jumbotron\">\n            <div className=\"content\">\n              <h1>Talent Finder</h1>\n              <h2>\n                Big talent pool, high client satisfaction rates, quick searches.\n                Talent Finder finds you talents that fit your company the best!\n              </h2>\n              <SearchBox onSearch={onSearchChange} />\n            </div>\n\n            <div className=\"illustrations\">\n              <img\n                src={require(\"../assets/female.svg\")}\n                alt=\"female-worker\"\n              ></img>\n            </div>\n          </div>\n\n          <div className=\"card-container\">\n            <CardList users={filteredTalents} />\n          </div>\n        </div>\n        <footer>\n          <p>\n            &copy; 2020 made by\n            <a\n              href=\"https://github.com/clairepeng0808\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {\" \"}\n              clairepeng\n            </a>\n          </p>\n        </footer>\n      </>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n//connect() is going to return another function -> higher order components\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\n//action\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD, //action\n  payload: text, //send data, user search input\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://api.mocki.io/v1/89d4c4de\")\n    // fetch -> to make requests to the server\n    .then((response) => response.json())\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch((error) =>\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\n    );\n};\n// not return an object, return a function\n// redux expects actions to return objects\n// by adding thunkmiddleware, when returning a function, it's going to trigger thunk, giving func the (dispatch) to use\n","export const CHANGE_SEARCH_FIELD = \"CHANGE _SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nconst initialStateSearch = {\n  searchField: \"\",\n};\n\n//reducer\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    //assign a new state, redux principles -> state is read-only\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: null,\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false,\n      });\n\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false,\n      });\n\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport \"./index.css\";\nimport App from \"./container/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { searchRobots, requestRobots } from \"./container/reducers\";\nimport { createLogger } from \"redux-logger\";\nimport thunkmiddleware from \"redux-thunk\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkmiddleware, logger)\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* add store to the provider so that it will pass down to all the components in App  */}\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}